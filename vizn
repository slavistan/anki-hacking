#!/usr/bin/env zsh

THISFILE=${0}
THISDIR=${0:A:h}

source src/shell.zsh # utilities

card() {
  eval "$HELPMACRO"

  if [ "$#" -gt 0 ]; then
    card_"$@"
  fi
}

card_create() {
  eval "$HELPMACRO"

  if [ "$#" -ge 0 ] && [ "$#" -le 2 ]; then
    if newid=$(sqlite3 $DB "INSERT INTO cards(command) VALUES('$1');" \
                "SELECT seq FROM sqlite_sequence WHERE name='cards';" 2>&1); then
      if [ ! -z "$2" ]; then
        for tag in $(echo "$2" | tr ',' '\n'); do
          sqlite3 $DB "INSERT INTO tags(cardid, tag) VALUES($newid, '$tag');"
        done
      fi
      logln "Successfully added new card at id $newid."
    else
      tagecho "SQLI" "$re"
      errln "sqlite3 error. Nothing done."
    fi
  else
    card_create_usage
  fi
}

card_create__usage() {
  echo "\
Usage:
  (1) $THISFILE $(echo $funcstack[1] | sed 's/__usage$//g' | tr '_' ' ') ACTION [TAGS]

Add a card to the collection. Optionally, specify a comma-separated list of tags."

}

card_view() {
  if [ ! "$#" -eq 0 ]; then
    reply=$(sqlite3 "$DB" "SELECT action FROM cards WHERE id=$1;" 2>&1)
    if [ "$?" -eq 0 ]; then
      logln "Viewing card '$1'."
      eval "$reply"
    else
      errln "No card matches id '$1'. Nothing done."
      exit 1
    fi
  fi
}

card__usage() {
  echo "card_usage: TODO"
}

collection() {
  eval $HELPMACRO

  if [ ! "$#" -eq 0 ]; then
    collection_"$@"
  else
    collection_usage
  fi
}

collection_create() {
  eval $HELPMACRO

  if [ -e "$1" ] || [ -z "$1" ]; then
    errln "File '$1' already exists or filename is empty. Nothing done."
  else
    if re=$(sqlite3 "$1" ".read $THISDIR/sql/collection-create.sql" 2>&1); then
      logln "Created new collection '$1'."
    else
      rm "$1"
      tagecho SQLI "$re"
      errln "sqlite3 Error. Nothing done."
    fi
  fi
}

collection_list() {
  eval $HELPMACRO

  [ "$#" -eq 0 ] && tables=$(sqlite3 "$DB" '.tables') || tables="$@"
  for table in $(echo "$tables"); do
    echo "$table..."
    sqlite3 -column -header "$DB" 'select * from '$table';' | hlline 1
    echo 
  done
}

collection_list__usage() {
  echo "\
Usage:
  (1) $THISFILE $(echo $funcstack[1] | sed 's/__usage$//g' | tr '_' ' ')

Display the collection's tables and their contents."
}

collection_create__usage() {
  echo "\
Usage:
  (1) $THISFILE $(echo $funcstack[1] | sed 's/__usage$//g' | tr '_' ' ') NAME

Create a new collection, i.e. initialize a new sqlite database named 'NAME'."
}

collection__usage() {
  echo "collection_usage: TODO"
}

schedule() {
  eval "$HELPMACRO"

  if [ ! "$#" -eq 0 ]; then
    schedule_"$@"
  else
    schedule_usage
  fi
}

schedule_fsmeval() {
  eval "$HELPMACRO"

  if [ "$#" -eq 3 ]; then
    # TODO: Sanitize inputs
    T="$1";e="$2";q="$3";
    # update e
    delta=$(LC_NUMERIC=C printf '%.1f' $(( q >= 3 ? 0.1*(q-3) : -0.1*(2-q) )) )
    e=$(LC_NUMERIC=C printf '%.1f' $(( e+delta >= 1.3 ? e+delta : 1.3 )) )
    # update T
    case $T in
      0)   [ "$q" -ge 0 ] && [ "$q" -le 2 ] && T=60  || T=600 ;;
      60)  [ "$q" -ge 0 ] && [ "$q" -le 2 ] && T=60  || T=600 ;;
      600) [ "$q" -ge 0 ] && [ "$q" -le 2 ] && T=60  || T=86400 ;; 
      *)   [ "$q" -ge 0 ] && [ "$q" -le 2 ] && T=600 || T=$(printf '%d' $(( T*e ))) ;;
    esac
    echo "{\"T\": $T, \"ε\": $e}"
  else
    errln "Invalid parameters. Nothing done."
    exit 1
  fi
}

schedule_fsmeval__usage() {
  echo "\
Usage:
  (1) $THISFILE $(echo $funcstack[1] | sed 's/__usage$//g' | tr '_' ' ') <T> <ε> <q>

Computes the next iteration of scheduling parameters based on the previous
interval 'T', the previous easyness factor 'ε' and the user's experienced
difficulty 'q'. Updated values are returned as json-formatted string."
}

schedule_due() {
  eval "$HELPMACRO"

  sqlite3 "$DB" 'select cardid from schedules where duesec < strftime("%s", "now");'
}

schedule_due__usage() {
  echo "\
Usage:
  (1) $THISFILE $(echo $funcstack[1] | sed 's/__usage$//g' | tr '_' ' ')

Prints ids of due cards."
}

_usage() {
  echo "Usage:"
  for cmd in $(cat $THISFILE | grep -oE '^[a-z]+\(\)' | tr -d '()'); do
    echo "  $cmd --help"
  done
}

if [ "$1" = "-t" ] || [ "$1" = "--target-db" ]; then
  DB="$2"
  shift 2
else
  DB="$THISDIR/collection.vizn"
fi

if [ ! "$#" = "0" ]; then
  "$@"
else
  _usage
fi
