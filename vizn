#!/usr/bin/env zsh

THISFILE=${0}
THISDIR=${0:A:h}
LC_NUMERIC=C # Make sure printf uses '.' in floating-point numbers

DB="collection.vizn"

#
# Macro to call funcname__usage if -h, --help, -? is passed as parameter
# Usage: 'eval $HELPMACRO'
#
HELPMACRO='if [ "$1" = "-h" ] || [ "$1" = "--help" ] || [ "$1" = "-?" ]; then
"$funcstack[2]__usage"
exit
fi'

tagecho() {
  TAG="$1"
  shift
  echo "$@" | sed 's/^/['"$TAG"'] /g'
}

errln() {
  echo "\033[31;1m[ERR ]\033[0m $@"
}

logln() {
  echo "\033[32;1m[INFO]\033[0m $@"
}

hlline() {
  [ "$#" -eq 0 ] && n=1 || n="$1"
  cat "-" | sed "$n,$n"' s/^\(.*\)$/'$(printf "\033[32;1m")'\1'$(printf "\033[0m")'/g'
}

card() {
  eval "$HELPMACRO"

  if [ ! "$#" -eq 0 ]; then
    card_"$@"
  fi
}

card_create() {
  eval "$HELPMACRO"

  if [ "$#" -ge 0 ] && [ "$#" -le 2 ]; then
    [ -z "$2" ] && info="NULL" || info="$2"

    id=$(date '+%s')
    if re=$(sqlite3 -echo "$DB" "insert into cards(command, info) values('$1', '$info');" 2>&1); then
      echo "$re"
    else
      tagecho "SQLI" "$re"
      errln "sqlite3 error. Nothing done."
    fi
  else
    card_create_usage
  fi
}

card_create__usage() {
  echo "\
Usage:
  (1) $THISFILE $(echo $funcstack[1] | sed 's/__usage$//g' | tr '_' ' ') ACTION [INFO]"
}

card_view() {
  if [ ! "$#" -eq 0 ]; then
    reply=$(sqlite3 "$DB" "select action from cards where id==$1;" 2>&1)
    if [ "$?" -eq 0 ]; then
      logln "Viewing card '$1'."
      eval "$reply"
    else
      errln "No card matches id '$1'. Nothing done."
      exit 1
    fi
  fi
}

card__usage() {
  echo "card_usage: TODO"
}

collection() {
  eval $HELPMACRO

  if [ ! "$#" -eq 0 ]; then
    collection_"$@"
  else
    collection_usage
  fi
}

collection_create() {
  eval $HELPMACRO

  if [ -e "$1" ] || [ -z "$1" ]; then
    errln "File '$1' already exists or filename is empty. Nothing done."
  else
    if re=$(sqlite3 "$1" ".read $THISDIR/sql/collection-create.sql" 2>&1); then
      logln "Created new collection '$1'."
    else
      rm "$1"
      tagecho SQLI "$re"
      errln "sqlite3 Error. Nothing done."
    fi
  fi
}

collection_list() {
  eval $HELPMACRO

  [ "$#" -eq 0 ] && tables=$(sqlite3 "$DB" '.tables') || tables="$@"
  for table in $(echo "$tables"); do
    echo "$table..."
    sqlite3 -column -header "$DB" 'select * from '$table';' | hlline 1
    echo 
  done
}

collection_list__usage() {
  echo "\
Usage:
  (1) $THISFILE $(echo $funcstack[1] | sed 's/__usage$//g' | tr '_' ' ')

Display the collection's tables and their contents."
}

collection_create__usage() {
  echo "\
Usage:
  (1) $THISFILE $(echo $funcstack[1] | sed 's/__usage$//g' | tr '_' ' ') NAME

Create a new collection, i.e. initialize a new sqlite database named 'NAME'."
}

collection__usage() {
  echo "collection_usage: TODO"
}

schedule() {
  if [ ! "$#" -eq 0 ]; then
    schedule_"$@"
  else
    schedule_usage
  fi
}

schedule_fsmeval() {
  if [ "$1" = "-h" ] || [ "$1" = "--help" ] || [ "$1" = "-?" ]; then
    schedule_fsmeval__usage 
  elif [ "$#" -eq 3 ]; then
    # TODO: Boundary checks
    T="$1";e="$2";q="$3";
    case $T in
      0)
        if [ "$q" -ge 0 ] && [ "$q" -le 3 ]; then
          T=60
        else
          T=600
        fi
        ;;
      60)
        if [ "$q" -ge 0 ] && [ "$q" -le 3 ]; then
          T=60
        else
          T=600
        fi
        ;;
      600)
        if [ "$q" -eq 4 ] || [ "$q" -eq 5 ]; then
          T=86400
        else
          T=60
        fi
        ;;
      86400)
        if [ "$q" -eq 4 ] || [ "$q" -eq 5 ]; then
          T=345600
        elif [ "$q" -eq 3 ]; then
          T=86400
        else
          T=600
        fi
        ;;
      *)
        if [ "$q" -ge 3 ] && [ "$q" -le 5 ]; then
          T=$(printf '%d' $(( T*e )))
        else
          T=600
        fi
        del=$(printf '%.1f' $(( 0.1 * (q-4) )) )
        e=$(printf '%.1f' $(( e+del >= 1.3 ? e+del : 1.3 )) )
        ;;
    esac
    echo "{\"T\": $T, \"ε\": $e}"
  fi
}

schedule_fsmeval__usage() {
  echo "\
Usage:
  (1) $THISFILE $(echo $funcstack[1] | sed 's/__usage$//g' | tr '_' ' ') <T> <ε> <q>

Computes the next iteration of scheduling parameters based on the previous
interval 'T', the previous easyness factor 'ε' and the user's experienced
difficulty 'q'. Updated values are returned as json-formatted string."
}

schedule_update() {
  echo "schedule_update: TODO"
}

usage() {
  echo "TODO"
}

if [ ! "$#" = "0" ]; then
  "$@"
else
  usage
fi
